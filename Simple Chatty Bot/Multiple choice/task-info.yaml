type: edu
files:
- name: src/bot/SimpleBot.kt
  visible: true
  text: |
    package bot

    import java.util.Scanner


    val scanner = Scanner(System.`in`) // Do not change this line

    fun main() {
        greet("Aid", "2020") // change it as you need
        remindName()
        guessAge()
        count()
        // ...
        end()
    }

    fun greet(assistantName: String, birthYear: String) {
        println("Hello! My name is ${assistantName}.")
        println("I was created in ${birthYear}.")
        println("Please, remind me your name.")
    }

    fun remindName() {
        val name = scanner.nextLine()
        println("What a great name you have, ${name}!")
    }

    fun guessAge() {
        println("Let me guess your age.")
        println("Enter remainders of dividing your age by 3, 5 and 7.")
        val rem3 = scanner.nextInt()
        val rem5 = scanner.nextInt()
        val rem7 = scanner.nextInt()
        val age = (rem3 * 70 + rem5 * 21 + rem7 * 15) % 105
        println("Your age is ${age}; that's a good time to start programming!")
    }

    fun count() {
        println("Now I will prove to you that I can count to any number you want.")
        val num = scanner.nextInt()
        for (i in 0..num) {
            print(i)
            println("!")
        }
    }

    fun test() {
        println("Let's test your programming knowledge.")
        // write your code here
    }

    fun end() {
        println("Congratulations, have a nice day!") // Do not change this text
    }
  learner_created: false
- name: test/ChattyBotTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.Collections;
    import java.util.List;


    class Clue {
        int age;
        String name;
        int count;

        Clue(String name, int age, int count) {
            this.age = age;
            this.name = name;
            this.count = count;
        }
    }


    public class ChattyBotTest extends StageTest<Clue> {

        @Override
        public List<TestCase<Clue>> generate() {
            String input = "Marry\n1\n0\n5\n10";

            for (int i = 1; i < 9; i++) {
                input += "\n" + i;
            }

            return Collections.singletonList(
                new TestCase<Clue>()
                    .setInput(input)
                    .setAttach(new Clue("Marry", 40, 10))
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String[] lines = reply.trim().split("\n");

            int length = 9 + clue.count + 1;

            if (lines.length <= length) {
                return CheckResult.wrong(
                    "You should output at least " + (length + 1) + " lines " +
                        "(for the count number " + clue.count +").\n" +
                        "Lines found: " + lines.length + "\n" +
                        "Your output:\n" +
                        reply
                );
            }

            String lineWithName = lines[3].toLowerCase();
            String name = clue.name.toLowerCase();

            if (!lineWithName.contains(name)) {
                return CheckResult.wrong(
                    "The name was " + clue.name + "\n" +
                        "But the 4-th line was:\n" +
                        "\"" + lines[3] + "\"\n\n" +
                        "4-th line should contain a name of the user"
                );
            }

            String lineWithAge = lines[6].toLowerCase();
            String age = Integer.toString(clue.age);

            if (!lineWithAge.contains(age)) {
                return CheckResult.wrong(
                    "Can't find a correct age " +
                        "in the last line of output! " +
                        "Maybe you calculated the age wrong?\n\n" +
                        "Your last line: \n" + "\"" + lines[6] + "\""
                );
            }

            for (int i = 0; i < clue.count + 1; i++) {
                String numLine = lines[i + 8];
                String actualNum = i + "!";

                if (!numLine.equals(actualNum)) {
                    return CheckResult.wrong(
                        "Expected " + (i+8) + "-th line: \n" +
                            "\"" + actualNum + "\"\n" +
                            "Your "+ (i+8) + "-th line: \n" +
                            "\"" + numLine + "\""
                    );
                }
            }

            String lastLine = lines[lines.length - 1];

            if (!lastLine.equals("Congratulations, have a nice day!")) {
                return CheckResult.wrong(
                    "Your last line should be:\n" +
                        "\"Congratulations, have a nice day!\"\n" +
                        "Found:\n" +
                        "\"" + lastLine + "\""
                );
            }

            return CheckResult.correct();
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/10774#comment
status: Failed
feedback:
  message: |-
    Error in test #1

    Infinite loop detected.
    Last 100 lines your program printed are the same.

    Please find below the output of your program during this failed test.
    Note that the &#39;&gt;&#39; character indicates the beginning of the input line.

    ---

    Hello! My name is Aid.
    I was created in 2020.
    Please, remind me your name.
    &gt; Marry
    What a great name you have, Marry!
    Let me guess your age.
    Enter remainders of dividing your age by 3, 5 and 7.
    &gt; 1
    &gt; 0
    &gt; 5
    Your age is 40; that&#39;s a good time to start programming!
    Now I will prove to you that I can count to any number you want.
    &gt; 10
    0!
    1!
    2!
    3!
    4!
    5!
    6!
    7!
    8!
    9!
    10!
    Let&#39;s test your programming knowledge.
    Why do we use methods?
    1. To repeat a statement multiple times.
    2. To decompose a program into several small subroutines.
    3. To determine the execution time of a program.
    4. To interrupt the execution of a program.
    &gt; 1
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
    Please, try again.
  time: "Sat, 05 Nov 2022 00:25:07 UTC"
record: -1
